#+title Emacs from scratch configuration
#+AUTHOR: Jorge Norena
#+DESCRIPTION: Jorge's custom Emacs config.
#+STARTUP: showeverything
#+Options: toc:2
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Table of Contents :toc:
- [[#issues][Issues]]
- [[#startup-performance][Startup performance]]
- [[#basic-configuration][Basic configuration]]
- [[#other-emacs-inbuilt-configs][Other emacs inbuilt configs]]
- [[#package-manager][Package manager]]
  - [[#auto-update][Auto update]]
- [[#ui][UI]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
  - [[#parentheses-color][Parentheses color]]
  - [[#rainbow-mode-to-show-colors][Rainbow mode to show colors]]
  - [[#dynamic-window-management][Dynamic window management]]
- [[#key-bindings][Key bindings]]
  - [[#general-the-evil-leader][General (the Evil Leader)]]
  - [[#evil-mode][Evil mode]]
  - [[#hydra][Hydra]]
  - [[#which-key][Which key]]
- [[#command-completion-and-search][Command completion and search]]
  - [[#ivy][Ivy]]
  - [[#counsel][Counsel]]
  - [[#helpful][Helpful]]
- [[#org-mode][Org mode]]
  - [[#basic-org-mode-config][Basic org mode config]]
  - [[#table-of-contents][Table of contents]]
  - [[#configure-babel-languages][Configure Babel languages]]
  - [[#auto-tangle-when-saving-org-file-not-working][Auto tangle when saving org file (not working)]]
- [[#development][Development]]
  - [[#ide-features-with-lsp-mode][IDE Features with lsp-mode]]
  - [[#python][Python]]
  - [[#company-mode][Company Mode]]
  - [[#projectile][Projectile]]
  - [[#magit][Magit]]
  - [[#git-time-machine][Git time machine]]
- [[#terminals][Terminals]]
  - [[#vterm][vterm]]
  - [[#eshell][Eshell]]
- [[#file-management][File Management]]
  - [[#dired][Dired]]
- [[#runtime-performance][Runtime Performance]]

* Issues

- Complains about a yas variable not existing when starting up.
- Setup Acutex.
- C/C++.
- Julia installation.
- Improve orgmode.
- Fonts are ugly on a graphical interface. Maybe use Monoid, looks quite good with this theme.
- Consider adding more orgmode key bindings.
- Consider making orgmode key bindings active only in orgmode.
- Load jupyter only when appropriate, currently taking too much startup time.
- Connectivity to cluster.
- Careful with hooks and after statements. We may be missing LSP features on orgmode.

* Startup performance

Measure startup time and increase the thresshold for garbage collection.

#+begin_src emacs-lisp

;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

(defun gdisplay-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                     (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'gdisplay-startup-time)

#+end_src

* Basic configuration

This section configures basic settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.

We also add a path for custom script files in this config.

#+begin_src emacs-lisp

(setq inhibit-startup-message t)

(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
(set-fringe-mode 10)
(unless (display-graphic-p)
    (xterm-mouse-mode 1))

;; Display line numbers
(column-number-mode)
(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative)

;; Disable line numbers for some modes
(dolist (mode '(term-mode-hook
		shell-mode-hook
		treemacs-mode-hook
		eshell-mode-hook
              eww-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

;;  Font
;; For mobile use 140
(set-face-attribute 'default nil :height 140)

;; Wrap on words
(global-visual-line-mode t)

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; Add custom scripts to path
(add-to-list 'load-path "~/.config/custom_emacs/scripts/")

;; Temp files generated by emacs go to trash
(setq backup-directory-alist '((".*" . "~/.Trash")))

;; "sane" defaults
(delete-selection-mode 1)    ;; You can select text and delete it by typing.
(electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
(electric-pair-mode 1)       ;; Turns on automatic parens pairing
;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

#+end_src

* Other emacs inbuilt configs

=recentf-mode= allows you to quickly look into recently opened files. Consider binding it to some key. There are packages to do this prettier, but this is inbuilt!

Access minibuffer command history with =M-n= and =M-p=. History length impacts emacs startup time.

With =save-place-mode= emacs remembers cursor position in the file.

By default Emacs fills your init file with a bunch of additional settings at the bottom. Those are settings you set from the program itself. We put them in =custom-vars.el=.

With =global-auto-revert-mode=, emacs will watch for changes in the files on disk and prompt the user.


#+begin_src emacs-lisp

  ; track recent filrs
  (recentf-mode 1)
  
  ; command minibuffer history
  (setq history-length 25)
  (savehist-mode 1)

  ; remember cursor position
  (save-place-mode 1)

  ; Move customization vars specified in graphical interface to a separate file
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)

  ;; Avoid graphical dialog boxes
  ;(setq use-dialog-box nil)

  ; Watch open buffers for changes on disk
  (global-auto-revert-mode 1)
  ; For dired and othet non-file buffers
  (setq global-auto-revert-non-file-buffers t)

#+end_src

* Package manager

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

For performance consider loading packages only when needed. For example using hooks, =after=, or =defer: s= for =s= seconds, =bind= so it gets loaded after some key press, or =command= to load it when a command is evoked.

#+begin_src emacs-lisp

  ;; --- Package manager ---

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
   (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)

#+end_src

** Auto update

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp :tangle no

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

Since it takes a lot of time to startup, I've disabled it.

* UI

** Theme

A nice alternative is to use the [[https://emacsfodder.github.io/emacs-theme-editor/][Theme creator]].

#+begin_src emacs-lisp 

      ;; --- THEME ---
      ;; preview it with M-x counsel-load-theme

      (use-package doom-themes)
      ;;(load-theme 'doom-gruvbox t)

      (use-package modus-themes
      :ensure t
      :config
      ;; Add all your customizations prior to loading the themes
      (setq modus-themes-italic-constructs nil
	    modus-themes-bold-constructs t
           modus-themes-to-toggle '(modus-vivendi-tinted modus-operandi-tinted))

      ;; Load the theme of your choice.
      (load-theme 'modus-vivendi-tinted t))

#+end_src

** Modeline

#+begin_src emacs-lisp

  ;; Better modeline
    ;; doom modeline was too heavy for mobile devices, and had font problems, planning on using this instead
    ;; (use-package powerline
    ;;   :config (powerline-evil-theme)
    ;;   )

    ;; NOTE: The first time you load your configuration on a new machine, you'll
    ;; need to run the following command interactively so that mode line icons
    ;; display correctly:
    ;;
    ;; M-x all-the-icons-install-fonts
    (use-package all-the-icons)

    (use-package doom-modeline
      :init (doom-modeline-mode 1)
      :custom ((doom-modeline-height 15)))

#+end_src

** Parentheses color

#+begin_src emacs-lisp

    ;; rainbow mode for nested parentheses.
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
  
#+end_src

** Rainbow mode to show colors

Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.

#+begin_src emacs-lisp

;; Rainbow mode for colors,  e.g. #ffffff will have a white background
(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)

#+end_src

** Dynamic window management

I'll play around with some dynamic window management. Some people complain that it messes up minibuffers and side trees, when it shouldn't.

#+begin_src emacs-lisp

  (use-package edwina
    :ensure t
    :config
    (setq display-buffer-base-action '(display-buffer-below-selected))
    ;; (edwina-setup-dwm-keys)
    (edwina-mode 1))

#+end_src

*** Keybindings

By default these keys are prefixed with =C-c C-w=. Customize =edwina-keymap-prefix= to change the prefix.

|-------------------+--------------------------------------|
| Binding           | Action                               |
|-------------------+--------------------------------------|
| =r=, =C-r=        | Arrange windows                      |
| =n=, =C-n=, =SPC= | Move to next window                  |
| =p=, =C-p=        | Move to previous window              |
| =N=, =C-S-n=      | Swap places with the next window     |
| =P=, =C-S-p=      | Swap places with the previous window |
| =%=, ={=, =[=     | Decrease the size of the master area |
| =^=, =}=, =]=     | Increase the size of the master area |
| =d=, =C-d=        | Decrease number of windows in master |
| =i=               | Increase number of windows in master |
| =k=, =C-k=        | Delete window                        |
| =RET=             | Cycle window to/from master area     |
| =c=, =C-c=        | Clone current window                 |
|-------------------+--------------------------------------|

*TIP:* Set up =dwm=-inspired keys with =(edwina-setup-dwm-keys)=

* Key bindings

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

** General (the Evil Leader)

#+begin_src emacs-lisp

;; A function used below
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file))

;; A code to move buffers around
(require 'buffer-move)

;; --- KEY BINDINGS INC. EVIL LEADER ---
;; This may hurt performance in mobile. Try using evil-leader instead.

(use-package general
  :config
  (general-create-definer my/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")
  (my/leader-keys
    "SPC" '(counsel-M-x :which-key "M-x")
    "." '(counsel-find-file :which-key "Find file")
    "TAB TAB" '(comment-line :which-key "Comment line")
    ;; Buffers
    "b" '(:ignore t :which-key "Bookmarks/Buffers")
    "b c" '(clone-indirect-buffer :which-key "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer in new window")
    "b d" '(bookmark-delete :which-key "Delete bookmark")
    "b b" '(counsel-ibuffer :which-key "Change buffer")
    "b i" '(ibuffer :which-key "List buffers")
    "b k" '(kill-this-buffer :which-key "Kill this buffer")
    "b K" '(kill-some-buffers :which-key "Kill multiple buffers")
    "b l" '(list-bookmarks :which-key "List bookmarks")
    "b m" '(bookmark-set :which-key "Set bookmark")
    "b n" '(next-buffer :which-key "Next buffer")
    "b p" '(previous-buffer :which-key "Previous buffer")
    "b r" '(revert-buffer :which-key "Reload buffer")
    "b R" '(rename-buffer :which-key "Rename buffer")
    "b s" '(basic-save-buffer :which-key "Save buffer")
    "b S" '(save-some-buffers :which-key "Save multiple buffers")
    "b w" '(bookmark-save :which-key "Save current bookmarks to bookmark file")
    ;; Eshell/evaluate
    "e" '(:ignore t :which-key "Eshell/Evaluate")    
    "e b" '(eval-buffer :which-key "Evaluate elisp in buffer")
    "e d" '(eval-defun :which-key "Evaluate defun containing or after point")
    "e e" '(eval-expression :which-key "Evaluate and elisp expression")
    "e h" '(counsel-esh-history :which-key "Eshell history")
    "e l" '(eval-last-sexp :which-key "Evaluate elisp expression before point")
    "e r" '(eval-region :which-key "Evaluate elisp in region")
    "e s" '(eshell :which-key "Eshell")
    ;; Org mode
    "m" '(:ignore t :which-key "Org")
    "m a" '(org-agenda :which-key "Org agenda")
    "m e" '(org-export-dispatch :which-key "Org export dispatch")
    "m i" '(org-toggle-item :which-key "Org toggle item")
    "m t" '(org-todo :which-key "Org todo")
    "m B" '(org-babel-tangle :which-key "Org babel tangle")
    "m T" '(org-todo-list :which-key "Org todo list")
    ;; Orgmode tables
    "m b" '(:ignore t :which-key "Tables")
    "m b -" '(org-table-insert-hline :which-key "Insert hline in table")
    ;; Orgmode dates
    "m d" '(:ignore t :which-key "Date/deadline")
    "m d t" '(org-time-stamp :which-key "Org time stamp")
    ;; Projects
    "p" '(projectile-command-map :which-key "Projectile")
    ;; Windows
    "w" '(:ignore t :which-key "Windows")
    "wc" '(evil-window-delete :which-key "Close window")
    "wn" '(evil-window-new :which-key "New window")
    "ws" '(evil-window-split :which-key "Horizontal split")
    "wv" '(evil-window-vsplit :which-key "Vertical split")
    "wh" '(evil-window-left :which-key "Move to window left")
    "wj" '(evil-window-down :which-key "Move to window down")
    "wk" '(evil-window-up :which-key "Move to window up")
    "wl" '(evil-window-right :which-key "Move to window right")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right")
    ;; Help!
    "h" '(:ignore t :which-key "Help")
    "h a" '(counsel-apropos :which-key "Apropos")
    "h b" '(describe-bindings :which-key "Describe bindings")
    "h c" '(describe-char :which-key "Describe character under cursor")
    "h d" '(:ignore t :which-key "Emacs documentation")
    "h d a" '(about-emacs :which-key "About Emacs")
    "h d d" '(view-emacs-debugging :which-key "View Emacs debugging")
    "h d f" '(view-emacs-FAQ :which-key "View Emacs FAQ")
    "h d m" '(info-emacs-manual :which-key "The Emacs manual")
    "h d n" '(view-emacs-news :which-key "View Emacs news")
    "h d o" '(describe-distribution :which-key "How to obtain Emacs")
    "h d p" '(view-emacs-problems :which-key "View Emacs problems")
    "h d t" '(view-emacs-todo :which-key "View Emacs todo")
    "h d w" '(describe-no-warranty :which-key "Describe no warranty")
    "h e" '(view-echo-area-messages :which-key "View echo area messages")
    "h f" '(describe-function :which-key "Describe function")
    "h F" '(describe-face :which-key "Describe face")
    "h g" '(describe-gnu-project :which-key "Describe GNU Project")
    "h i" '(info :which-key "Info")
    "h I" '(describe-input-method :which-key "Describe input method")
    "h k" '(describe-key :which-key "Describe key")
    "h l" '(view-lossage :which-key "Display recent keystrokes and the commands run")
    "h L" '(describe-language-environment :which-key "Describe language environment")
    "h m" '(describe-mode :which-key "Describe mode")
    "h r" '(:ignore t :which-key "Reload")
    "h t" '(tldr :which-key "TLDR docs")
    "h v" '(describe-variable :which-key "Describe variable")
    "h w" '(where-is :which-key "Prints keybinding for command if set")
    "h x" '(describe-command :which-key "Display full documentation for command")
    "hrr" '(reload-init-file :which-key "Reload emacs config")
    ;; Toggles
    "t"  '(:ignore t :which-key "Toggles")
    "tt" '(modus-themes-toggle :which-key "Toggle light/dark theme")
    "tl" '(display-line-numbers-mode :which-key "Toggle line numbers")
    "tv" '(vterm-toggle :which-key "Toggle vterm")
    "tr" '(rainbow-mode :which-key "Toggle rainbow mode")
    ;; Find
    "f" '(:ignore t :which-key "Find")
    "ff" '(counsel-find-file :which-key "Find file")
    "fr" '(counsel-recentf :which-key "Recent files")
    ;; Dired
    "d" '(:ignore t :which-key "Dired")
    "d d" '(dired :which-key "Open dired")
    "d j" '(dired-jump :which-key "Dired jump to current")
    "d n" '(neotree-dir :which-key "Open directory in neotree")
    "d p" '(peep-dired :which-key "Peep-dired")
    ;; Git
    "g" '(:ignore t :wk "Git")    
    "g /" '(magit-displatch :wk "Magit dispatch")
    "g ." '(magit-file-displatch :wk "Magit file dispatch")
    "g b" '(magit-branch-checkout :wk "Switch branch")
    "g c" '(:ignore t :wk "Create") 
    "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
    "g c c" '(magit-commit-create :wk "Create commit")
    "g c f" '(magit-commit-fixup :wk "Create fixup commit")
    "g C" '(magit-clone :wk "Clone repo")
    "g f" '(:ignore t :wk "Find") 
    "g f c" '(magit-show-commit :wk "Show commit")
    "g f f" '(magit-find-file :wk "Magit find file")
    "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
    "g F" '(magit-fetch :wk "Git fetch")
    "g g" '(magit-status :wk "Magit status")
    "g i" '(magit-init :wk "Initialize git repo")
    "g l" '(magit-log-buffer-file :wk "Magit buffer log")
    "g r" '(vc-revert :wk "Git revert file")
    "g s" '(magit-stage-file :wk "Git stage file")
    "g t" '(git-timemachine :wk "Git time machine")
    "g u" '(magit-stage-file :wk "Git unstage file")
  ))

#+end_src

** Evil mode

*** Evil mode and collection

#+begin_src emacs-lisp

;; --- EVIL MODE ---

(use-package evil
  :init
  (setq evil-split-window-below t)
  (setq evil-vsplit-window-right t)
  (setq evil-want-integration t) ; This is optional, required for some packages
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state) ;; make C-g also exit input mode
  
  ;; set this so j and k go down in lines you can see, not lines in the original file
  ;(evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "<down>" 'evil-next-visual-line)
  ;(evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  (evil-global-set-key 'motion "<up>" 'evil-previous-visual-line)
  
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))


#+end_src

*** Additional evil plugins

#+begin_src emacs-lisp

(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1))

(use-package evil-commentary
  :after evil
  :config
  (evil-commentary-mode))

(use-package evil-multiedit
  :after evil
  :config
  (evil-multiedit-default-keybinds))

(use-package evil-snipe
  :after evil
  :init
  (evil-snipe-mode 1))  ; Globally enable evil-snipe

(use-package evil-terminal-cursor-changer
  :config
  (evil-terminal-cursor-changer-activate) ; or (etcc-on)
  )
  
#+end_src

** Hydra

Allows you to group a repetitive task, or related tasks under one head. In this way you don't have to input several long chains, but a single chain that opens a menu of related commands ("you spawn a hydra").

#+begin_src elisp

  ;; --- Hydra (Allows grouping several keybindings together so you access them with only one additional key) ---

  (use-package hydra
    :after general)

  ;; example
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (my/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

** Which key

#+begin_src emacs-lisp

  ;;   ;; --- Which key ---
  ;; (use-package which-key
  ;;   :defer 0
  ;;   :diminish which-key-mode
  ;;   :config
  ;;   (which-key-mode)
  ;;   (setq which-key-idle-delay 1))

(use-package which-key
  :init
    (which-key-mode 1)
  :diminish which-key-mode
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))

#+end_src

* Command completion and search

** Ivy

#+begin_src emacs-lisp
  
;; --- Ivy command completion ---
;; Maybe try other packages and test for performance

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         :map ivy-switch-buffer-map
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))

#+end_src

** Counsel

#+begin_src emacs-lisp

(use-package counsel
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-ibuffer)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history))
  :config
  (setq ivy-initial-inputs-alist nil) ;; don't start searches with ^
  )

#+end_src

** Helpful

#+begin_src emacs-lisp

;; additional help from helpful
(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

* Org mode

** Basic org mode config

First a few functions to improve the headings and the text. This doesn't seem to work on mobile. But I do plan to keep the replacement of hyphen with dots, the fixed pitch, and the ellipsis replaced with an arrow (if the fonts allow it).

#+begin_src emacs-lisp

  (defun org-font-setup ()
  
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
			    '(("^ *\\([-]\\) "
			       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    ;; Consider removing all this visual stuff for mobile
    (dolist (face '((org-level-1 . 1.4)
		    (org-level-2 . 1.3)
		    (org-level-3 . 1.2)
		    (org-level-4 . 1.1)
		    (org-level-5 . 1.05)
		    (org-level-6 . 1.05)
		    (org-level-7 . 1.05)
		    (org-level-8 . 1.05)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

Now the org-mode configuration. This has a bunch of configs for the agenda, tags, agenda modes, capture templates,

#+begin_src emacs-lisp


  ;; --- ORG MODE! ---

  (setq evil-want-C-i-jump nil)  

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . org-font-setup)
    :config
    (setq org-ellipsis " ▾")

    ;; Avoid strange indentation behavior orgmode
    (electric-indent-mode -1) ;; if this doesn't work, try doing it after the hook below
    (setq org-edit-src-content-indentation 0) ;; 

    ;; What does this do?
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    ;; Which files to use for the agenda.
    (setq org-agenda-files
          '("~/org/Tasks.org"
            "~/org/Schedule.org"
            "~/org/Dates.org"))

    ;; Custom To do keywords / states
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "ACTIVE(a)" "|" "DONE(d!)")))

    ;; Files to use for refiling
    (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
        ("Tasks.org" :maxlevel . 1)))
    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    ;; Tags
    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@errand" . ?E)
         ("@home" . ?H)
         ("@work" . ?W)
         ("agenda" . ?a)
         ("planning" . ?p)
         ("publish" . ?P)
         ("batch" . ?b)
         ("note" . ?n)
         ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))))

    (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/org/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree "~/org/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree "~/org/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)))

    ;; Capture keybindings
    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (org-font-setup))

  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun gorg-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . gorg-mode-visual-fill))

  ;; Function to set up RET key binding in normal mode
  (defun my/org-mode-evil-setup ()
    "Custom configurations for org-mode with evil-mode."
    (evil-define-key 'normal org-mode-map (kbd "RET") 'org-open-at-point)
    (evil-define-key 'normal org-mode-map (kbd "C-i") 'org-cycle))

  ;; Add the function to the org-mode hook
  (add-hook 'org-mode-hook 'my/org-mode-evil-setup)
#+end_src

** Table of contents

#+begin_src emacs-lisp

(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))

#+end_src

** Configure Babel languages

Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                           |
|------------------------+------------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT   |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'        |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'      |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'      |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'        |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'   |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT'  |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'          |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'              |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'          |
| <sh                    | '#+begin_src shell' ... '#+end_src'      |
| <py                    | '#+begin_src python' ... '#+end_src'     |
| <el                    | '#+begin_src emacs-lisp' ... '#+end_src' |

The last we added below

#+begin_src emacs-lisp

(with-eval-after-load 'org ;defer until org loads
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

  (org-babel-do-load-languages
      'org-babel-load-languages
	'((emacs-lisp . t)
	  (python . t)
      (jupyter . t) ;Currently not working
      ;(ipython . t)
    )) ;See the python section
)
#+end_src

** Auto tangle when saving org file (not working)

#+begin_src emacs-lisp

  (defun org-babel-tangle-config ()
   (when (string-equal (buffer-file-name)
	  (expand-file-name "~/.config/custom_emacs/config_emacs.org"))
  ;; dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
     (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'save-after-hook #'org-babel-tangle-config)))

#+end_src

* Development

** IDE Features with lsp-mode

*** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun glsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . glsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+end_src

When installing =dap-mode= use =:commands dap-debug=. Also use =after= for =pyenv=.

*** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

*** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp-mode)

#+end_src

*** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp-mode)

#+end_src

*** Debugging with dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].  You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.  Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

#+begin_src emacs-lisp

  (use-package dap-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)
    :commands 'dap-debug
    :config

    ;; Bind `C-c l d` to `dap-hydra` for easy access
    (general-define-key
      :keymaps 'lsp-mode-map
      :prefix lsp-keymap-prefix
      "d" '(dap-hydra t :which-key "debugger")))

#+end_src

*** Syntax checking with flycheck 

For info on flycheck see [[https://www.flycheck.org/en/latest/languages.html][this]].

#+begin_src emacs-lisp

(use-package flycheck
  :defer t
  :after lsp-mode
  :diminish
  :init (global-flycheck-mode))

#+end_src

*** Code snippets with yasnip 

Snippet autocompletion.

#+begin_src emacs-lisp

(use-package yasnippet
  :after lsp-mode 
  :init (global-yas-mode))

(use-package yasnippet-snippets
  :after yasnippet)

#+end_src

** Python

See the following:

- [[https://www.emacswiki.org/emacs/PythonProgrammingInEmacs][Emacs wiki on python programming]].
- [[https://sqrtminusone.xyz/posts/2021-05-01-org-python/][Replacing Jupyter notebook with org mode]].
- [[https://martibosch.github.io/jupyter-emacs-universe/][Jupyter in the Emacs universe]].

It seems that the closed-source =pyright= is faster. Consider using that if =pyls= is too slow.

We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs.  Check out [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the =pyls= configuration]] in the =lsp-mode= documentation for more details.

Make sure you have the =pyls= language server installed before trying =lsp-mode=!

#+begin_src sh :tangle no

pip install --user "python-lsp-server"
pip install --user "debugpy"

#+end_src

There are a number of other language servers for Python so if you find that =pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

#+begin_src emacs-lisp

  (use-package python-mode
    :hook (python-mode . lsp-deferred)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    ;; (python-shell-interpreter "python3")
    ;; (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (setq lsp-pylsp-server-command "pylsp")
    (setq lsp-pylsp-plugins-jedi-completion-enabled t)  ; Enable Jedi completion setup
    (setq lsp-pylsp-plugins-pylint-enabled t)           ; Enable Pylint for linting
    (setq lsp-pylsp-plugins-flake8-enabled t)           ; Optionally, enable Flake8 for linting
    (require 'dap-python)
    (dap-python-setup))


#+end_src

You can use the pyvenv package to use =virtualenv= environments in Emacs.  The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

#+begin_src emacs-lisp :tangle no

  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))

#+end_src

We instead use Anaconda, so use the following

#+begin_src emacs-lisp

(use-package conda
  :after python-mode
  :config
  (setq conda-anaconda-home (expand-file-name "~/Programs/miniforge3/"))
  (setq conda-env-home-directory (expand-file-name "~/Programs/miniforge3/"))
  (setq conda-env-subdirectory "envs")

  (unless (getenv "CONDA_DEFAULT_ENV")
    (conda-env-activate "base")))

(use-package company-anaconda
  :after '(company conda)
  :config
    '(add-to-list 'company-backends 'company-anaconda)
)

(add-hook 'python-mode-hook 'anaconda-mode)

#+end_src

When using anaconda, autocompletion won't work on imports. Hopefully the above solves this.

**** Jupyter 

#+begin_src emacs-lisp 

(use-package jupyter)

#+end_src

We import several scripts that allow us to easily interact with the kernel. Look at the description [[file:scripts/jupyter_utils.org][here]].

#+begin_src emacs-lisp

(require 'my-jupyter-utils)

#+end_src

For some reason, ~M-x jupyter-run-repl~ has permision problems and fails to run on mobile.

There's a [[https://github.com/termux/proot/issues/248][hack]] that makes it work (wonder how long it'll last):

#+begin_src C :tangle skip_getifaddrs.c
#include <errno.h>
#include <ifaddrs.h>
int getifaddrs(struct ifaddrs **ifap) {
	errno = EOPNOTSUPP;
	return -1;
}
#+end_src

#+begin_src bash
gcc skip_getifaddrs.c -o skip_getifaddrs.so -shared
#+end_src

To get a kernel to run do the following

#+begin_src bash
LD_PRELOAD=~/.config/custom_emacs/skip_getifaddrs.so jupyter notebook
#+end_src

When attempting =jupyter-run-repl=, I get a =ipresolver.cpp permission denied= error. When attempting =jupyter-connect-repl=, I get an error regarding the ZMQ module. (At least on the tablet.) However, when running org code cells, it seems to execute (but on a local process, not on jupyter). See [[https://github.com/nnicandro/emacs-zmq][the ZMQ github page]].

I attempted installing =autoconf=, =zeromq=, =automake=, and =libtool=. This could compile ZMQ by going to the =src= folder inside the =zmq= directory found in =.config/emacs/elpa=, running ~aclocal~, ~autoreconf -i~, and then ~make~ in the parent directory. Ialso set some variables as suggested in the ZMQ github page. [[https://stackoverflow.com/questions/18978252/error-libtool-library-used-but-libtool-is-undefined][This post]] really helped. Now ZMQ is installed, but trying to use it crashes emacs!

I redownloaded ZMQ by cloning into the github repo. I ran =make= on its directory. Then opened emacs by using

#+begin_src shell

LD_PRELOAD=~/.config/custom_emacs/skip_getifaddrs.so emacs

#+end_src

Now at least I can use =M-x jupyter-run-repl=.

We tried with the older [[https://github.com/gregsexton/ob-ipython][ob-ipython]].

#+begin_src emacs-lisp :tangle no

(use-package ob-ipython)

#+end_src

Tests with this older package give a strange JSON error. 

*** LUA

Emacs doesn't come with LUA highlighting by default. For now, we simply use the following

#+begin_src emacs-lisp

;; LUA support
(use-package lua-mode)

#+end_src

** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    ;(when (file-directory-p "~/Projects/Code")
    ;  (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

    ;; Magit for git interface
    (use-package magit
      :commands magit-status ;add more commands if needed
      :custom
      (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

    ;; NOTE: Make sure to configure a GitHub token before using this package!
    ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
    ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
    (use-package forge
      :after magit)

#+end_src

** Git time machine 

[[https://github.com/emacsmirror/git-timemachine][git-timemachine]] is a program that allows you to move backwards and forwards through a file’s commits.  ‘SPC g t’ will open the time machine on a file if it is in a git repo.  Then, while in normal mode, you can use ‘CTRL-j’ and ‘CTRL-k’ to move backwards and forwards through the commits.

#+begin_src emacs-lisp

;; Git time machine to travel beetween commits.
(use-package git-timemachine
  :after git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)

#+end_src

* Terminals

** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))

#+end_src

** Eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

We will be covering Eshell more in future videos highlighting other things you can do with it.

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp

    (defun gconfigure-eshell ()
      ;; Save command history when commands are entered
      (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

      ;; Truncate buffer for performance
      (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

      ;; Bind some useful keys for evil-mode
      (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
      (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
      (evil-normalize-keymaps)

      (setq eshell-history-size         10000
	    eshell-buffer-maximum-lines 10000
	    eshell-hist-ignoredups t
	    eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        ))

    (use-package eshell-git-prompt
      :after eshell)

    (use-package eshell
      :hook (eshell-first-time-mode . gconfigure-eshell)
      :config

      (with-eval-after-load 'esh-opt
	    (setq eshell-destroy-buffer-when-process-dies t)
	    (setq eshell-visual-commands '("htop" "zsh" "vim")))

      (eshell-git-prompt-use-theme 'powerline))

#+end_src

* File Management

** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!
 
**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-algho --group-directories-first"))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))

;; Make dired use a single buffer
(use-package dired-single 
  :commands (dired dired-jump))

;; Make dired show icons
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

;; Specify which program should open each file
;; look into open-xdg to open using default linux apps
(use-package dired-open
  :commands (dired dired-jump)
  :config
  ;; Doesn't work as expected!
  ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
  (setq dired-open-extensions '(("png" . "feh")
				("mkv" . "mpv"))))

;; ;; Hide dotfiles
;; (use-package dired-hide-dotfiles
;;   :hook (dired-mode . dired-hide-dotfiles-mode)
;;   :config
;;   (evil-collection-define-key 'normal 'dired-mode-map
;;     "H" 'dired-hide-dotfiles-mode))

#+end_src

* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src

also check out https://www.github.com/koral/gcmh for runtime performance.
